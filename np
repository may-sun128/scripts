#!/usr/bin/python

import os
import datetime
import subprocess

# TODO
# 	rename __save_input() to something that makes more sense
#	add ability to save specific lines
#	update help info 

### Functions ####

# saves with default file name
def save_input(text):
	# Generate Default Name
	# TODO: add file naming functionality

	n = datetime.datetime.now()
	d = n.strftime('%d%m%y')
	t = n.strftime('%X') 
	name = d + '-' + t.replace(':', '-') + '.txt'
	
	# Save File

	f = open(f'/home/mholmes/.cbin/.np-saved-files/' + name, 'x')
	f.write(text)
	f.close()
	print('Saved Session at /home/mholmes/.cbin/.np-saved-files')

# saves with optional name specified as the first argument
def __save_input(text, i):
	i = i.split()
	print(f'<__save_input()> {i}')
	name = ''
	# if input only has one argument
	# save to default location
	if len(i) == 0:
		n = datetime.datetime.now()
		d = n.strftime('%d%m%y')
		t = n.strftime('%X') 
		name = d + '-' + t.replace(':', '-') + '.txt'
	elif len(i) == 2:
		name = i[1] + '.txt'
	print(f'debug: {name}')

	# Save File

	f = open(f'/home/mholmes/.cbin/.np-saved-files/{name}', 'x') 
	f.write(text)
	f.close()
	print('Saved Session at /home/mholmes/.cbin/.np-saved-files')

# executes bash with the NP prompt
def execute_bash(command):
	obj = subprocess.Popen(f"{command}", stdout=subprocess.PIPE, shell=True)
	obj_bin, err = obj.communicate()

	# Not sure what the point of this is
	status = obj.wait()

	val = obj_bin.decode('ascii')
	return val

# prints all input thus far with line numbers
# line numbers are there so that later you can specify a range of input to save
def print_session(text):
	i = 0
	for line in text.split('\n'):
		print(f'[{i}] {line}')
		i += 1

### Variables ###

help = '''
e, exit 	exit prompt
c, cls 		clear screen
save 		save session to file'''
#chprompt	change prompt (similar to PS1 in bash)


### Main Control ###

def main(): 
	text = ''
	prompt = '//'
	count = 0
	args = []
	while True:
		count += 1
		i = input(f'{prompt} ')
		text += i + '\n'
		
		if i == 'e' or i == 'exit':
			exit() 

		elif i == 'cls' or i == 'c':
			os.system('clear') 

		# if save is in input
		elif '__save' in i:
			# if input has more than one word 
			if len(i.split()) > 1:
				# if that word is 'save'
				if i.split()[0] == '__save':
					__save_input(text, i)
				else:
					pass 

		elif i == 'save':
			save_input(text)

		elif '$' in i:
			out = execute_bash(i[1:])
			print(out)

		elif i == 'new':
			text = ''

		elif i == 'count':
			print(count)

		elif i == 'session':
			print_session(text)

		elif i == 'help':
			print(help)

main()


